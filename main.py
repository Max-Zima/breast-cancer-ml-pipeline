#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∫–∞ –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è,
–≤–∫–ª—é—á–∞—è –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É, –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, –æ—Ü–µ–Ω–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:
- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Windows, Linux, macOS
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WSL –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Apache Airflow 2.8+
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Airflow
- –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ë–î

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫:
1. make quick-setup-universal (–∞–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
2. start_airflow.bat (Windows) –∏–ª–∏ ./start_airflow.sh (Linux/macOS)
3. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ DAG breast_cancer_ml_pipeline

–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (WSL):
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ./start_airflow.sh –≤ WSL
2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8080
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ DAG breast_cancer_ml_pipeline
"""

import logging
import os
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def run_complete_pipeline():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    try:
        logger.info("=" * 60)
        logger.info("–ó–ê–ü–£–°–ö –ü–ê–ô–ü–õ–ê–ô–ù–ê –ú–û –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –†–ê–ö–ê –ú–û–õ–û–ß–ù–û–ô –ñ–ï–õ–ï–ó–´")
        logger.info("=" * 60)

        start_time = datetime.now()

        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        logger.info("\nüîÑ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
        from etl.data_loader import main as load_main

        load_main()
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –®–∞–≥ 2: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("\nüîÑ –®–∞–≥ 2: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        from etl.data_preprocessor import main as preprocess_main

        preprocess_main()
        logger.info("‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –®–∞–≥ 3: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        logger.info("\nüîÑ –®–∞–≥ 3: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        from etl.model_trainer import main as train_main

        train_main()
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        # –®–∞–≥ 4: –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        logger.info("\nüîÑ –®–∞–≥ 4: –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏...")
        from etl.model_evaluator import main as evaluate_main

        evaluate_main()
        logger.info("‚úÖ –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\nüîÑ –®–∞–≥ 5: –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        from etl.storage_manager import main as storage_main

        storage_main()
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        end_time = datetime.now()
        duration = end_time - start_time

        logger.info("\n" + "=" * 60)
        logger.info("üéâ –ü–ê–ô–ü–õ–ê–ô–ù –í–´–ü–û–õ–ù–ï–ù –£–°–ü–ï–®–ù–û!")
        logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath('results')}")
        logger.info("=" * 60)

        return True

    except Exception as e:
        logger.error(f"‚ùå –°–±–æ–π –ø–∞–π–ø–ª–∞–π–Ω–∞: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return False


def show_results_summary():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    results_dir = "results"
    if os.path.exists(results_dir):
        logger.info("\nüìã –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file in os.listdir(results_dir):
            file_path = os.path.join(results_dir, file)
            if os.path.isfile(file_path):
                size = os.path.getsize(file_path)
                logger.info(f"  üìÑ {file} ({size} –±–∞–π—Ç)")
    else:
        logger.warning("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.

    Returns:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    required_modules = ["pandas", "numpy", "sklearn", "joblib"]

    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
            logger.info(f"‚úÖ {module} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            missing_modules.append(module)
            logger.error(f"‚ùå {module} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    if missing_modules:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏: {missing_modules}")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é: pip install -r requirements.txt")
        return False

    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ú–û –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–∫–∞ –º–æ–ª–æ—á–Ω–æ–π –∂–µ–ª–µ–∑—ã")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        logger.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists("wdbc.data"):
        logger.error("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö 'wdbc.data' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs("results", exist_ok=True)
    os.makedirs("logs", exist_ok=True)

    # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞
    success = run_complete_pipeline()

    if success:
        show_results_summary()
        logger.info(
            "üéØ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é results/"
        )
        logger.info("=" * 60)
        logger.info("üåê –í–ê–†–ò–ê–ù–¢–´ –ó–ê–ü–£–°–ö–ê AIRFLOW:")
        logger.info("  –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–ª—é–±–∞—è –û–°):")
        logger.info("    1. make quick-setup-universal")
        logger.info("    2. start_airflow.bat (Windows) –∏–ª–∏ ./start_airflow.sh (Linux/macOS)")
        logger.info("  –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (WSL): ./start_airflow.sh")
        logger.info("üîß –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Airflow:")
        logger.info("    stop_airflow.bat (Windows) –∏–ª–∏ ./stop_airflow.sh (Linux/macOS/WSL)")
        logger.info("üìä –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Airflow: http://localhost:8080 (admin/admin)")
        logger.info("=" * 60)
    else:
        logger.error("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –Ω–µ—É–¥–∞—á–µ–π")
        sys.exit(1)


if __name__ == "__main__":
    main()
